---
code-block-bg: true
code-block-border-left: "#31BAE9"
execute:
  eval: false
engine: knitr
bibliography: references.bib
---

# Nanophase

## Introduction

[Nanophase](https://github.com/Hydro3639/NanoPhase/tree/main) is an easy-to-use pipeline to generate reference-quality MAGs using only Nanopore long reads (long-read-only strategy) or both Nanopore long and Illumina short reads (hybrid strategy) from complex metagenomes [@Liu2022]. Since nanophase v0.2.0, it also supports to generate reference-quality genomes from bacterial/archaeal isolates (long-read-only or hybrid strategy). If nanophase is interrupted, it will resume from the last completed stage.

Notice that nanophase does not allow for a separate assembly of multiple samples while at the same time making use of depth information from all of those samples. It is however possible to run nanophase independently on multiple samples or consider a co-assembly. However, "co-assembly of a large number of metagenomes that contain very closely related populations often hinders confident assignments of shared contigs into individual bins" and should be avoided for distinct samples [@Shaiber2019].

Some more considerations on whether your samples can be used for a co-assembly or not can be found [here](https://angus.readthedocs.io/en/2019/recovering-rep-genomes-from-mgs.html#what-is-a-co-assembly) and [here](https://training.galaxyproject.org/training-material/topics/microbiome/tutorials/metagenomics-assembly/tutorial.html).

## Installation

Nanophase is installed on Crunchomics amplicomics share. If you want access please send an email to [n.dombrowski\@uva.nl](mailto:n.dombrowski@uva.nl){.email}. After you got access, you can add the amplicomics conda environments (in which nanophase is installed) as follows:

```{bash}
conda config --add envs_dirs /zfs/omics/projects/amplicomics/miniconda3/envs/
```

If you want to install nanophase yourself, you can follow the steps below. Beware, that the GTDB database is quite large and requires \~80GB of space.

```{bash}
#add necessary channels
conda config --add channels defaults
conda config --add channels conda-forge
conda config --add channels bioconda

#install environment in the amplicomics share
mamba create -p /zfs/omics/projects/amplicomics/miniconda3/envs/nanophase_0.2.3 -c nanophase nanophase -y

## download database: May skip if you have done before or GTDB and PLSDB have been downloaded in the server
#exhange the paths to where you want to download the data
cd /path_to_gtdb_folder
wget https://data.gtdb.ecogenomic.org/releases/latest/auxillary_files/gtdbtk_data.tar.gz && tar xvzf gtdbtk_data.tar.gz

cd /path_to_plsdb_folder
wget https://ccb-microbe.cs.uni-saarland.de/plsdb/plasmids/download/plsdb.fna.bz2 && bunzip2 plsdb.fna.bz2

#activate env
conda activate nanophase_0.2.3

## setting locations for databases
## Change /path_to_gtdb_folder/ to the real location where you stored the GTDB
echo "export GTDBTK_DATA_PATH=/path_to_gtdb_folder/" > $(dirname $(dirname `which nanophase`))/etc/conda/activate.d/np_db.sh

## Change /path/to/plsdb.fna to the real location where you stored the PLSDB
echo "export PLSDB_PATH=/path_to_plsdb_folder/plsdb.fna" >> $(dirname $(dirname `which nanophase`))/etc/conda/activate.d/np_db.sh

#confirm that all packages have been installed
nanophase check

##restart environment for it to recognize the changes 
conda deactivate && conda activate nanophase_0.2.3 
```

## Usage

Input:

-   Illumina short reads and/or Nanopore long-reads in fastq, fastq.gz, fasta, fasta.qz or fq.gz format

Output:

-   01-LongAssemblies sub-folder containing information of Nanopore long-read assemblies (assembler: metaFlye)
-   02-LongBins sub-folder containing the initial bins with relatively low-accuracy quality
-   03-Polishing sub-folder containing polished bins

### Example

In the example below, we download the [ZymoBIOMICS Gut Microbiome Standard](https://files.zymoresearch.com/protocols/_d6331_zymobiomics_gut_microbiome_standard.pdf) sequenced with Nanopore. This Standard is a mixture of 18 bacterial strains, 2 fungal strains, and 1 archaeal strain in staggered abundances to mimic a true gut microbiome.

Notice, that you can also run the workflow if you have both Nanopore and Illumina data. For Illumina-data only other workflows that work with multiple samples might be more useful to explore.

```{bash}
#start environment 
conda activate nanophase_0.2.3

#go to wdir (exchange path to where you want to analyse your data)
cd /path/to/wdir

#prepare folders for better organization 
mkdir logs
mkdir scripts
mkdir data
mkdir -p results/seqkit
mkdir -p results/nanophase

#download the test-dataset 
#comes with 1,679,780 reads with an avg length of 4300 bp and avg quality of 16
fastq-dump SRR17913199 -O data

#get summary statistics for the dataset
seqkit stats -a -To results/seqkit/stats.tsv data/SRR17913199.fastq 

#analyse data with only Nanopore reads 
nanophase meta -l data/SRR17913199.fastq -t 30 -o results

#check memory usage for slurm job: 39147
sacct -j 39147 --format=User,JobID,Jobname,state,start,end,elapsed,MaxRss,ncpus
```

Useful arguments:

-   `--long_read_only` only Nanopore long reads were involved \[default: on\]
-   `--hybrid` both short and long reads were required \[Optional\]
-   `-l`, `--long` Nanopore reads: fasta/q file that basecalled by Guppy 5+ or using 20+ chemistry was recommended if only Nanopore reads were included \[Mandatory\]
-   `-1` Illumina short reads: fasta/q paired-end #1 file \[Optional\]
-   `-2` Illumina short reads: fasta/q paired-end #2 file \[Optional\]
-   `-m`, `--medaka_model` medaka model used for medaka polishing \[default: r1041_e82_400bps_sup_g615\]
-   `-e`, `--environment` Build-in model of SemiBin \[default: wastewater\]; detail see: SemiBin single_easy_bin -h. Other choices are: human_gut, dog_gut, ocean, soil, cat_gut, human_oral, mouse_gut, pig_gut, built_environment, wastewater, chicken_caecum, global
-   `-t`, `--threads` number of threads that used for assembly and polishing \[default: 16\]
-   `-o`, `--out` output directory \[default: ./nanophase-out\]